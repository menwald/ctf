// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: mapapiv1.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MapAPI_GetEntireMap_FullMethodName = "/ctf.mapapi.v1.MapAPI/GetEntireMap"
)

// MapAPIClient is the client API for MapAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapAPIClient interface {
	GetEntireMap(ctx context.Context, in *GetEntireMapRequest, opts ...grpc.CallOption) (*GetEntireMapResponse, error)
}

type mapAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMapAPIClient(cc grpc.ClientConnInterface) MapAPIClient {
	return &mapAPIClient{cc}
}

func (c *mapAPIClient) GetEntireMap(ctx context.Context, in *GetEntireMapRequest, opts ...grpc.CallOption) (*GetEntireMapResponse, error) {
	out := new(GetEntireMapResponse)
	err := c.cc.Invoke(ctx, MapAPI_GetEntireMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapAPIServer is the server API for MapAPI service.
// All implementations must embed UnimplementedMapAPIServer
// for forward compatibility
type MapAPIServer interface {
	GetEntireMap(context.Context, *GetEntireMapRequest) (*GetEntireMapResponse, error)
	mustEmbedUnimplementedMapAPIServer()
}

// UnimplementedMapAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMapAPIServer struct {
}

func (UnimplementedMapAPIServer) GetEntireMap(context.Context, *GetEntireMapRequest) (*GetEntireMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntireMap not implemented")
}
func (UnimplementedMapAPIServer) mustEmbedUnimplementedMapAPIServer() {}

// UnsafeMapAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapAPIServer will
// result in compilation errors.
type UnsafeMapAPIServer interface {
	mustEmbedUnimplementedMapAPIServer()
}

func RegisterMapAPIServer(s grpc.ServiceRegistrar, srv MapAPIServer) {
	s.RegisterService(&MapAPI_ServiceDesc, srv)
}

func _MapAPI_GetEntireMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntireMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapAPIServer).GetEntireMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapAPI_GetEntireMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapAPIServer).GetEntireMap(ctx, req.(*GetEntireMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapAPI_ServiceDesc is the grpc.ServiceDesc for MapAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctf.mapapi.v1.MapAPI",
	HandlerType: (*MapAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntireMap",
			Handler:    _MapAPI_GetEntireMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapapiv1.proto",
}
